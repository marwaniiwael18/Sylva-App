name: CI/CD Pipeline
name: CI/CD Pipeline

on:
  push:
    branches: [ main, aymen/donation ]
  pull_request:
    branches: [ main, aymen/donation ]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_DATABASE: test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
      - name: Setup PHP
        uses: shivammathur/setup-php@bf6b4fbd49ca58e4608c9c89fba0b8d90bd2a39f
        with:
          php-version: '8.2'
          extensions: pdo, pdo_mysql
      - name: Setup Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020
        with:
          node-version: '20'
      - name: Install PHP dependencies
        run: composer install --no-progress --prefer-dist --optimize-autoloader
      - name: Install Node.js dependencies
        run: npm install
      - name: Build assets
        run: |
          npm run build
          ls -la public/build/
      - name: Copy environment file
        run: cp .env.ci .env || true
      - name: Generate application key
        run: php artisan key:generate || true
      - name: Wait for MySQL
        run: |
          for i in {1..30}; do
            if mysqladmin ping -h 127.0.0.1 -u root --silent; then
              echo "MySQL is ready"
              break
            fi
            echo "Waiting for MySQL... ($i/30)"
            sleep 2
          done
      - name: Run database migrations
        run: php artisan migrate --force || true
      - name: Run tests
        run: php artisan test --coverage-clover=coverage.xml || true

  sonar:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
        with:
          fetch-depth: 0
      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
      - name: Wait for SonarCloud Quality Gate
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: https://sonarcloud.io
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_SHA: ${{ github.sha }}
          PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
        run: |
          set -e

          # Poll SonarCloud for an analysis associated with this commit
          POLL_INTERVAL=10
          MAX_RETRIES=60  # ~10 minutes

          echo "Looking up SonarCloud task for commit ${GITHUB_SHA}..."

          if [ -z "$PROJECT_KEY" ]; then
            echo "SONAR_PROJECT_KEY secret is not set. Please set it to \"<org>_<project>\"." >&2
            exit 1
          fi

          BRANCH=${GITHUB_REF#refs/heads/}
          SHORT_REV=${GITHUB_SHA:0:7}

          for i in $(seq 1 $MAX_RETRIES); do
            echo "Attempt $i/$MAX_RETRIES: querying SonarCloud for analysis status (branch=$BRANCH)..."

            ANALYSES_JSON=$(curl -s -u "$SONAR_TOKEN:" "https://sonarcloud.io/api/project_analyses/search?project=$PROJECT_KEY&branch=$BRANCH")
            ANALYSIS_ID=$(echo "$ANALYSES_JSON" | jq -r --arg rev "$GITHUB_SHA" --arg short "$SHORT_REV" '.analyses[] | select(.revision==$rev or (.revision | startswith($short))) | .key' | head -n1)
            if [ -z "$ANALYSIS_ID" ]; then
              echo "Fallback lookup: scanning recent analyses for matching revision..."
              ANALYSIS_ID=$(echo "$ANALYSES_JSON" | jq -r '.analyses[] | "\(.key) \(.revision)"' | grep -F "$GITHUB_SHA" | awk '{print $1}' | head -n1 || true)
              if [ -z "$ANALYSIS_ID" ]; then
                ANALYSIS_ID=$(echo "$ANALYSES_JSON" | jq -r '.analyses[] | "\(.key) \(.revision)"' | grep -F "$SHORT_REV" | awk '{print $1}' | head -n1 || true)
              fi
            fi

            if [ -n "$ANALYSIS_ID" ] && [ "$ANALYSIS_ID" != "null" ]; then
              echo "Found analysis $ANALYSIS_ID for commit $GITHUB_SHA"
              QG_STATUS=$(curl -s -u "$SONAR_TOKEN:" "https://sonarcloud.io/api/qualitygates/project_status?analysisId=$ANALYSIS_ID" | jq -r '.projectStatus.status')
              echo "Quality Gate status: $QG_STATUS"
              if [ "$QG_STATUS" = "OK" ]; then
                echo "Quality Gate passed"
                exit 0
              elif [ "$QG_STATUS" = "ERROR" ]; then
                echo "Quality Gate failed"
                exit 1
              else
                echo "Quality Gate pending: $QG_STATUS"
              fi
            else
              echo "No matching analysis found yet for commit. Showing recent analyses for branch $BRANCH (helpful for debugging):"
              echo "$ANALYSES_JSON" | jq -r '.analyses[0:5] | .[] | "- key: \(.key)  revision: \(.revision)  date: \(.date)"'
              echo "Waiting $POLL_INTERVAL seconds..."
            fi

            sleep $POLL_INTERVAL
          done

          echo "Timed out waiting for SonarCloud Quality Gate" >&2
          exit 1

  build:
    runs-on: ubuntu-latest
    needs: sonar
    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@885d1462b80bc1c1c7f0b00334ad271f09369c55
      - name: Login to DockerHub (anonymous OK for local build)
        run: echo "Skipping docker login in CI"
      - name: Build and start services with docker-compose
        run: |
          # Generate Laravel APP_KEY and write to .env.ci so docker compose can pick it up
          APP_KEY="base64:$(openssl rand -base64 32)"
          echo "APP_KEY=${APP_KEY}" > .env.ci

          docker compose --env-file .env.ci build --pull --parallel
          docker compose --env-file .env.ci up -d --force-recreate --renew-anon-volumes mysql prometheus grafana app

          echo "Waiting for app to be healthy (http://localhost:8000)..."
          for i in {1..30}; do
            if curl -sS --fail http://localhost:8000 >/dev/null; then
              echo "App is responding"
              break
            fi
            echo "Waiting for app... ($i/30)"
            sleep 2
          done

          # Run migrations inside the app container (retry until successful)
          echo "Running database migrations inside app container..."
          for i in {1..30}; do
            if docker compose --env-file .env.ci exec -T app php artisan migrate --force; then
              echo "Migrations ran successfully"
              break
            fi
            echo "Waiting for migrations to succeed... ($i/30)"
            sleep 2
          done
      - name: Smoke test
        run: |
          curl -sS --fail http://localhost:8000 || (echo "App not responding" && exit 1)
      - name: Tear down containers
        if: always()
        run: |
          docker compose down -v

  monitoring:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Monitoring placeholder
        run: |
          echo "Monitoring step: add your monitoring/notification commands here"

    branches: [ main, aymen/donation ]
  pull_request:
    branches: [ main, aymen/donation ]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_DATABASE: test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    steps:
    - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
    - name: Setup PHP
      uses: shivammathur/setup-php@bf6b4fbd49ca58e4608c9c89fba0b8d90bd2a39f
          run: |
            set -e

            # Configuration
            POLL_INTERVAL=10
            MAX_RETRIES=60  # ~10 minutes

            echo "Looking up SonarCloud task for commit ${GITHUB_SHA}..."

            if [ -z "$PROJECT_KEY" ]; then
              echo "SONAR_PROJECT_KEY secret is not set. Please set it to \"<org>_<project>\"." >&2
              exit 1
            fi

            BRANCH=${GITHUB_REF#refs/heads/}
            SHORT_REV=${GITHUB_SHA:0:7}

            for i in $(seq 1 $MAX_RETRIES); do
              echo "Attempt $i/$MAX_RETRIES: querying SonarCloud for analysis status (branch=$BRANCH)..."

              ANALYSES_JSON=$(curl -s -u "$SONAR_TOKEN:" "https://sonarcloud.io/api/project_analyses/search?project=$PROJECT_KEY&branch=$BRANCH")
              ANALYSIS_ID=$(echo "$ANALYSES_JSON" | jq -r --arg rev "$GITHUB_SHA" --arg short "$SHORT_REV" '.analyses[] | select(.revision==$rev or (.revision | startswith($short))) | .key' | head -n1)
              if [ -z "$ANALYSIS_ID" ]; then
                echo "Fallback lookup: scanning recent analyses for matching revision..."
                ANALYSIS_ID=$(echo "$ANALYSES_JSON" | jq -r '.analyses[] | "\(.key) \(.revision)"' | grep -F "$GITHUB_SHA" | awk '{print $1}' | head -n1 || true)
                if [ -z "$ANALYSIS_ID" ]; then
                  ANALYSIS_ID=$(echo "$ANALYSES_JSON" | jq -r '.analyses[] | "\(.key) \(.revision)"' | grep -F "$SHORT_REV" | awk '{print $1}' | head -n1 || true)
                fi
              fi

              if [ -n "$ANALYSIS_ID" ] && [ "$ANALYSIS_ID" != "null" ]; then
                echo "Found analysis $ANALYSIS_ID for commit $GITHUB_SHA"
                QG_STATUS=$(curl -s -u "$SONAR_TOKEN:" "https://sonarcloud.io/api/qualitygates/project_status?analysisId=$ANALYSIS_ID" | jq -r '.projectStatus.status')
                echo "Quality Gate status: $QG_STATUS"
                if [ "$QG_STATUS" = "OK" ]; then
                  echo "Quality Gate passed"
                  exit 0
                elif [ "$QG_STATUS" = "ERROR" ]; then
                  echo "Quality Gate failed"
                  exit 1
                else
                  echo "Quality Gate pending: $QG_STATUS"
                fi
              else
                echo "No matching analysis found yet for commit. Showing recent analyses for branch $BRANCH (helpful for debugging):"
                echo "$ANALYSES_JSON" | jq -r '.analyses[0:5] | .[] | "- key: \(.key)  revision: \(.revision)  date: \(.date)"'
                echo "Waiting $POLL_INTERVAL seconds..."
              fi

              sleep $POLL_INTERVAL
            done

            echo "Timed out waiting for SonarCloud Quality Gate" >&2
            exit 1

                  # Configuration
                  POLL_INTERVAL=10
                  MAX_RETRIES=60  # ~10 minutes

                  echo "Looking up SonarCloud task for commit ${GITHUB_SHA}..."

                  if [ -z "$PROJECT_KEY" ]; then
                    echo "SONAR_PROJECT_KEY secret is not set. Please set it to \"<org>_<project>\"." >&2
                    exit 1
                  fi

                  BRANCH=${GITHUB_REF#refs/heads/}
                  SHORT_REV=${GITHUB_SHA:0:7}

                  for i in $(seq 1 $MAX_RETRIES); do
                    echo "Attempt $i/$MAX_RETRIES: querying SonarCloud for analysis status (branch=$BRANCH)..."

                    ANALYSES_JSON=$(curl -s -u "$SONAR_TOKEN:" "https://sonarcloud.io/api/project_analyses/search?project=$PROJECT_KEY&branch=$BRANCH")
                    ANALYSIS_ID=$(echo "$ANALYSES_JSON" | jq -r --arg rev "$GITHUB_SHA" --arg short "$SHORT_REV" '.analyses[] | select(.revision==$rev or (.revision | startswith($short))) | .key' | head -n1)
                    if [ -z "$ANALYSIS_ID" ]; then
                      echo "Fallback lookup: scanning recent analyses for matching revision..."
                      ANALYSIS_ID=$(echo "$ANALYSES_JSON" | jq -r '.analyses[] | "\(.key) \(.revision)"' | grep -F "$GITHUB_SHA" | awk '{print $1}' | head -n1 || true)
                      if [ -z "$ANALYSIS_ID" ]; then
                        ANALYSIS_ID=$(echo "$ANALYSES_JSON" | jq -r '.analyses[] | "\(.key) \(.revision)"' | grep -F "$SHORT_REV" | awk '{print $1}' | head -n1 || true)
                      fi
                    fi

                    if [ -n "$ANALYSIS_ID" ] && [ "$ANALYSIS_ID" != "null" ]; then
                      echo "Found analysis $ANALYSIS_ID for commit $GITHUB_SHA"
                      QG_STATUS=$(curl -s -u "$SONAR_TOKEN:" "https://sonarcloud.io/api/qualitygates/project_status?analysisId=$ANALYSIS_ID" | jq -r '.projectStatus.status')
                      echo "Quality Gate status: $QG_STATUS"
                      if [ "$QG_STATUS" = "OK" ]; then
                        echo "Quality Gate passed"
                        exit 0
                      elif [ "$QG_STATUS" = "ERROR" ]; then
                        echo "Quality Gate failed"
                        exit 1
                      else
                        echo "Quality Gate pending: $QG_STATUS"
                      fi
                    else
                      echo "No matching analysis found yet for commit. Showing recent analyses for branch $BRANCH (helpful for debugging):"
                      echo "$ANALYSES_JSON" | jq -r '.analyses[0:5] | .[] | "- key: \(.key)  revision: \(.revision)  date: \(.date)"'
                      echo "Waiting $POLL_INTERVAL seconds..."
                    fi

                    sleep $POLL_INTERVAL
                  done

                  echo "Timed out waiting for SonarCloud Quality Gate" >&2
                  exit 1

          build:
            runs-on: ubuntu-latest
            needs: sonar
            steps:
              - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
              - name: Set up Docker Buildx
                uses: docker/setup-buildx-action@885d1462b80bc1c1c7f0b00334ad271f09369c55
              - name: Login to DockerHub (anonymous OK for local build)
                run: echo "Skipping docker login in CI"
              - name: Build and start services with docker-compose
                run: |
                  # Generate Laravel APP_KEY and write to .env.ci so docker compose can pick it up
                  APP_KEY="base64:$(openssl rand -base64 32)"
                  echo "APP_KEY=${APP_KEY}" > .env.ci

                  docker compose --env-file .env.ci build --pull --parallel
                  docker compose --env-file .env.ci up -d --force-recreate --renew-anon-volumes mysql prometheus grafana app

                  echo "Waiting for app to be healthy (http://localhost:8000)..."
                  for i in {1..30}; do
                    if curl -sS --fail http://localhost:8000 >/dev/null; then
                      echo "App is responding"
                      break
                    fi
                    echo "Waiting for app... ($i/30)"
                    sleep 2
                  done

                  # Run migrations inside the app container (retry until successful)
                  echo "Running database migrations inside app container..."
                  for i in {1..30}; do
                    if docker compose --env-file .env.ci exec -T app php artisan migrate --force; then
                      echo "Migrations ran successfully"
                      break
                    fi
                    echo "Waiting for migrations to succeed... ($i/30)"
                    sleep 2
                  done
              - name: Smoke test
                run: |
                  curl -sS --fail http://localhost:8000 || (echo "App not responding" && exit 1)
              - name: Tear down containers
                if: always()
                run: |
                  docker compose down -v

          monitoring:
            runs-on: ubuntu-latest
            needs: build
            steps:
              - name: Monitoring placeholder
                run: |
                  echo "Monitoring step: add your monitoring/notification commands here"