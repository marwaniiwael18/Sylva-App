name: CI/CD Pipeline

on:
  push:
    branches: [ main, aymen/donation ]
  pull_request:
    branches: [ main, aymen/donation ]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_DATABASE: test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    steps:
    - uses: actions/checkout@v4
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: pdo, pdo_mysql
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    - name: Install PHP dependencies
      run: composer install --no-progress --prefer-dist --optimize-autoloader
    - name: Install Node.js dependencies
      run: npm install
    - name: Build assets
      run: |
        npm run build
        ls -la public/build/
    - name: Copy environment file
      run: cp .env.ci .env
    - name: Generate application key
      run: php artisan key:generate
    - name: Wait for MySQL
      run: |
        for i in {1..30}; do
          if mysqladmin ping -h 127.0.0.1 -u root --silent; then
            echo "MySQL is ready"
            break
          fi
          echo "Waiting for MySQL... ($i/30)"
          sleep 2
        done
    - name: Run database migrations
      run: php artisan migrate --force
    - name: Run tests
      run: php artisan test --coverage-clover=coverage.xml

  sonar:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Install jq
      run: |
        sudo apt-get update
        sudo apt-get install -y jq
    - name: Generate test results (for Sonar upload)
      run: |
        mkdir -p test-results
        php artisan test --log-junit=test-results/junit.xml || true
    - name: Wait for SonarCloud Quality Gate
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: https://sonarcloud.io
        GITHUB_REPOSITORY: ${{ github.repository }}
        GITHUB_SHA: ${{ github.sha }}
      run: |
        set -e

        # Configuration
        POLL_INTERVAL=10
        MAX_RETRIES=60  # ~10 minutes

        echo "Looking up SonarCloud task for commit ${GITHUB_SHA}..."

        PROJECT_KEY="${{ secrets.SONAR_PROJECT_KEY }}"
        if [ -z "$PROJECT_KEY" ]; then
          echo "SONAR_PROJECT_KEY secret is not set. Please set it to \"<org>_<project>\"." >&2
          exit 1
        fi

        for i in $(seq 1 $MAX_RETRIES); do
          echo "Attempt $i/$MAX_RETRIES: querying SonarCloud for analysis status..."

          ANALYSES_JSON=$(curl -s -u "$SONAR_TOKEN:" "https://sonarcloud.io/api/project_analyses/search?project=$PROJECT_KEY")
          ANALYSIS_ID=$(echo "$ANALYSES_JSON" | jq -r --arg rev "$GITHUB_SHA" '.analyses[] | select(.events[]? | .name=="completed") | select(.revision==$rev) | .key' | head -n1)

          if [ -n "$ANALYSIS_ID" ] && [ "$ANALYSIS_ID" != "null" ]; then
            echo "Found analysis $ANALYSIS_ID for commit $GITHUB_SHA"
            QG_STATUS=$(curl -s -u "$SONAR_TOKEN:" "https://sonarcloud.io/api/qualitygates/project_status?analysisId=$ANALYSIS_ID" | jq -r '.projectStatus.status')
            echo "Quality Gate status: $QG_STATUS"
            if [ "$QG_STATUS" = "OK" ]; then
              echo "Quality Gate passed"
              exit 0
            elif [ "$QG_STATUS" = "ERROR" ]; then
              echo "Quality Gate failed"
              exit 1
            else
              echo "Quality Gate pending: $QG_STATUS"
            fi
          else
            echo "No matching analysis found yet for commit. Waiting $POLL_INTERVAL seconds..."
          fi

          sleep $POLL_INTERVAL
        done

        echo "Timed out waiting for SonarCloud Quality Gate" >&2
        exit 1

  build:
    runs-on: ubuntu-latest
    needs: sonar
    # Remove the temporary disable to allow build to run when sonar_wait passes
    steps:
    - uses: actions/checkout@v4
    - name: Build Docker image (local only)
      run: docker build -t sylva-app:latest .

  # This job polls SonarCloud Quality Gate for the latest analysis of this commit.
  # It supports keeping SonarCloud Automatic Analysis enabled. The job will wait
  # up to ~10 minutes (configurable) for a Quality Gate result. If the gate is
  # OK the pipeline continues to `build`, otherwise it fails.
  monitoring:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Monitoring placeholder
      run: |
        echo "Monitoring step: add your monitoring/notification commands here"